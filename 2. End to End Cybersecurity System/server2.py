import tools
import socket
import random
from OpenSSL import crypto, SSL
from socket import gethostname
from pprint import pprint
from time import gmtime, mktime
from os.path import exists, join


def create_cert():

    CERT_FILE = "server2_cert.crt"
    KEY_FILE = "server2_key.key"

            
    # create a key pair
    k = crypto.PKey()
    k.generate_key(crypto.TYPE_RSA, 2048)

    # creating a certificate
    cert = crypto.X509()
    cert.get_subject().C = "GR"
    cert.get_subject().ST = "Athens"
    cert.get_subject().L = "Syntagma"
    cert.get_subject().O = "Ministry of Finance"
    cert.get_subject().OU = "Greek Government"
    cert.get_subject().CN = gethostname()
    cert.set_serial_number(1000)
    cert.gmtime_adj_notBefore(0)
    cert.gmtime_adj_notAfter(10*365*24*60*60)   #10 years
    cert.set_issuer(cert.get_subject())
    cert.set_pubkey(k)
    cert.sign(k, 'sha256')

    print cert.get_issuer().get_components()

    open(CERT_FILE, "wt").write(
        crypto.dump_certificate(crypto.FILETYPE_PEM, cert))
    open(KEY_FILE, "wt").write(
        crypto.dump_privatekey(crypto.FILETYPE_PEM, k))



create_cert()

host = '127.0.0.1'
port = 5000


# Generating a RSA key pair

rsa_key_l = 2048
key_pair_server = tools.key_generation(rsa_key_l)

e = key_pair_server[0][0]
n = key_pair_server[1][1]
d = key_pair_server[1][0]

#print "SERVER e"
#print e
#print "SERVER n"
#print n


# Writing server RSA keys to a file

rsa_file_name_server = "server2_rsa_keys.pair"
tools.file_write_line(rsa_file_name_server, str(e)+'\n'+str(n)+'\n'+str(d))


# Establishing connection between the server and the client

s = socket.socket()
s.bind((host, port))

s.listen(1)
c, addr = s.accept()
print "Connection from: " + str(addr)


# Reading Client RSA keys from a file

rsa_file_client = "client2_rsa_keys.pair"
file_temp_1 = open(rsa_file_client, "r")
client_e = file_temp_1.readline()
client_n = file_temp_1.readline()
file_temp_1.close()

#print "Client e"
#print client_e
#print "Client n"
#print client_n


# Sending server certificate

send_cert = open("server2_cert.crt").read()
print "sending certificate: " + str(send_cert)
c.send(send_cert)


# Receiving client certificate

cert_recv2 = c.recv(2048)
print 'Received: ' + str(cert_recv2)
open("client2_cert.crt", "w").write(cert_recv2)


# Verifying client certificate

print "Certificate authentication (server)"

if(tools.verify_certificate(cert_recv2)==True):
    print "Success! Client certificate is verified!"
else:
    print "Certificate authentication failed"


# Generating a symmetric key to be used later in AES

symmetric_key = tools.pick_key()
print "The symmetric key generated by the server is: " + str(symmetric_key)


# Encrypting the symmetric key with RSA encryption, converting the result from byte array to string in order to send it to the client

rsa_enc_symmetric_key = tools.rsa_encrypt(symmetric_key, int(client_e), int(client_n))
rsa_enc_symmetric_key2 = tools.byte_array_to_string(rsa_enc_symmetric_key)

c.send(rsa_enc_symmetric_key2)


# Establishing 2-way encrypted communication

while True:
    data_received = c.recv(2048)
    print "Message the server received from the client: " + str(data_received)
    if not data_received:
        break

    data = tools.CBC_decrypt(data_received, symmetric_key, tools.get_IV())
    data = tools.aes_reverse_padding(data)
    print "Decrypted message: " + str(data)

    data = raw_input("\n->")

    data = tools.aes_padding(data)
    data = tools.CBC_encrypt(data, symmetric_key, tools.get_IV())
    print "Encrypted message sent by the server to the client: " + str(data)

    c.send(data)

c.close()
